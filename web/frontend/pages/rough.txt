


metafields ...

average count ...

half star rating ...

padding , margin ...

inappropriate handle set 

///////

metafield condition for create ...

correct decimal value ...
 
////



///////////

tables creation on app installation 

setting table 

//////////



const addImportedReview=async(req,res)=>{

//   const Obj = JSON.parse(req.params.obj);
//   const shop = req.shopname;
//   const handle = req.params.handle;
//   const Id = req.params.id;
//   const reviewTable = shop + '_review'
//   const detailsTable = shop + '_details'
//   const settingsTable = shop + '_settings'
//   var averageRating;
//   var length;
//   const Columns = (Object.keys(Obj))
//   const Data = Object.values(Obj)
//   const DataValue = Data.map(cat => `'${cat}'`).join(', ');

//   const checkStatus = `Select settings FROM ${settingsTable} Where type='autopublish'`;
//   const query = `INSERT INTO ${reviewTable} (${Columns} , productid) VALUES (${DataValue} , '${Id}');INSERT INTO ${detailsTable} (${Columns} , productid) VALUES (${DataValue} , '${Id}')`
//   const enabledQuery = `INSERT INTO ${reviewTable} (${Columns} , reviewStatus) VALUES (${DataValue}, 'Published');INSERT INTO ${detailsTable} (${Columns} , reviewStatus) VALUES (${DataValue},'Published')`

//   // con.query(checkStatus, (err, results) => {
//   //   if (err) {
//   //     console.error('Error inserting reviews', err);
//   //     return;
//   //   }
//   //   let settingObj = (JSON.parse(results[0].settings));
//   //   var reviewStatus = (settingObj.autopublish)

//   //   if (reviewStatus === 'enabled') {
//   //     con.query(enabledQuery, async (err, results) => {
//   //       if (err) {
//   //         console.error('Error inserting reviews', err);
//   //         return;
//   //       }
//   //       // res.send(JSON.stringify('Data inserted successfully'));
//   //       await avgRating()

//   //     });
//   //   }
//   //   else {
//       con.query(query, async (err, results) => {
//         if (err) {
//           console.error('Error inserting reviews', err);
//           return;
//         }
//         // res.send(JSON.stringify('Data inserted successfully'));
//         await avgRating()

//       });
//   //   }
//   // });

//   async function avgRating() {

//     //************** fetching average rating from db to store in metafield */
//     const getAveragequery = ` SELECT starRating , reviewTitle FROM ${reviewTable} WHERE productHandle=${handle} AND reviewStatus='Published'`;
//     con.query(getAveragequery, async (err, results) => {
//       if (err) {
//         console.error('Error fetching reviews', err);
//         return;
//       }
//       else {
//         let sum = 0;
//         let rating = results.map((itm) => itm.starRating)
//         length = results.length
//         let totalRating = rating.forEach((itm) => {
//           sum += itm;
//         })
//         averageRating = sum / length;
//         await metafieldFunctionality()

//       }
//     });
//   }

//   async function metafieldFunctionality() {

//     //****************** getting session data *******************/
//     let completeShop = shop + '.myshopify.com';
//     var session;
//     var RatingMetaId;
//     var ReviewCountId;

//     let getSessionQuery = `Select * from shopify_sessions WHERE shop='${completeShop}'`
//     con.query(getSessionQuery, async (err, results) => {
//       if (err) {
//         console.error('err fetching session ', err)

//       }


//       session = results[0];

//       let version = shopify.api.config.apiVersion
//       let endpoint = `https://${shop}.myshopify.com/admin/api/${version}/graphql.json`;

//       const client = new shopify.api.clients.Graphql({ session });


//       //****************************** retrieving metafield id ************************



//       const getRatingMetaIdQuery = `query {
//       product(id: "gid://shopify/Product/${Id}") {
//         metafield(namespace: "itgeeks_reviews", key: "average_rating") {
//           id
//         }
//       }
//     }`

//       const getCountMetaIdQuery = `query {
//       product(id: "gid://shopify/Product/${Id}") {
//         metafield(namespace: "itgeeks_reviews", key: "review_count") {
//           id
//         }
//       }
//     }`


//       // Execute the rating  mutation
//       try {
//         const response = await client.query({
//           data: {
//             query: getRatingMetaIdQuery,
//           },
//         });

//         const myData = await response.body;

//         RatingMetaId = (Object(myData).data.product.metafield.id);

//       } catch (error) {
//         console.error('erorrrrrr=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', error.message);
//       }

//       // Execute the count  mutation
//       try {
//         const response = await client.query({
//           data: {
//             query: getCountMetaIdQuery,
//           },
//         });

//         const myData = await response.body;

//         ReviewCountId = (Object(myData).data.product.metafield.id);

//       } catch (error) {
//         console.error('erorrrrrr=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', error.message);
//       }

//       //****************** creating metafield *************************/
      
//       const createMetafieldMutation = `
//       mutation {
//         productUpdate(
//           input : {
//             id: "gid://shopify/Product/${Id}",
//             metafields: [
//               {
//                 namespace: "itgeeks_reviews",
//                 key: "average_rating",
//                 value: "${averageRating?.toFixed(1)}",
//                 type: "number_decimal",
//               },
//               {
//                 namespace: "itgeeks_reviews",
//                 key: "review_count",
//                 value: "${length}",
//                 type: "integer",
//               }
//             ]
//           }) {
//             product {
//               metafields(first: 3) {
//                 edges {
//                   node {
//                     namespace
//                     key
//                     value
//                   }
//                 }
//               }
//             }
//           }
//         }
//         `
        
//         //****************** updating my metafield *************************/

//         const metafieldsWithId = [
//           {
//             id: `${RatingMetaId}`,
//             value: `${averageRating?.toFixed(1)}`, // Default value for review count
            
//           },
//           {
//             id: `${ReviewCountId}`,
//             value: `${length}`, // Default value for review count
            
//           },
//         ];

//         // Define the GraphQL mutation
//         const UpdateMetafieldMutation = `mutation productUpdate($input: ProductInput!) {
//     productUpdate(input: $input) {
//     product {
//     id
//     metafields(first: 10) {
//     edges {
//     node {
//     namespace
//     key
//     value
//     }
//     }
//     }
//     }
//     userErrors {
//     field
//     message
//     }
//     }
//     }`;

//       // Prepare the variables for the mutation
//       const Metafieldvariables = {
//         input: {
//           id: `gid://shopify/Product/${Id}`, // Replace with actual product ID
//           metafields: metafieldsWithId,
//         },
//       };


//       // ************ checking if metafield exists or not //
//       if (RatingMetaId === null || RatingMetaId === '' || RatingMetaId === undefined || ReviewCountId === null || ReviewCountId === '' || ReviewCountId === undefined ) {

//         console.log(' creating metafield **********************************************')
//         try {
//           const createResponse = await client.query({
//             data: {
//               query: createMetafieldMutation
//             }
//           });

//           console.log('create mutation response ******************', Object(createResponse).body.data.productUpdate.userErrors)

//         } catch (error) {
//           console.error('erorrrrrr with create metafield =>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', error.message);
//         }
//       }

//       else {
//         // Execute the mutation

//         try {
//           const mutationResponse = await client.query({
//             data: {
//               query: UpdateMetafieldMutation,
//               variables: Metafieldvariables,
//             },
//           });

//           console.log('update mutation response ******************', Object(mutationResponse).body.data.productUpdate.userErrors)


//         } catch (error) {
//           console.error('erorrrrrr with update metafield =>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', error.message);
//         }

//       }

//     })

//   }


// }